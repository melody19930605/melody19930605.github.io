<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://melody19930605.github.io/</id>
    <title>Melody</title>
    <updated>2020-05-06T09:30:02.569Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://melody19930605.github.io/"/>
    <link rel="self" href="https://melody19930605.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://melody19930605.github.io/images/avatar.png</logo>
    <icon>https://melody19930605.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Melody</rights>
    <entry>
        <title type="html"><![CDATA[MySQL]]></title>
        <id>https://melody19930605.github.io/post/mysql/</id>
        <link href="https://melody19930605.github.io/post/mysql/">
        </link>
        <updated>2020-05-06T08:52:45.000Z</updated>
        <content type="html"><![CDATA[<p>MySQL新建唯一索引时是不区分大小写的，如果需要区分需要添加<br>
<strong>加唯一索引，binary是为了英文区分大小写，因为mysql的唯一索引不区分大小写</strong></p>
<pre><code class="language-sql">CREATE TABLE
Student
(
    id bigint NOT NULL AUTO_INCREMENT COMMENT '主键',
    no VARCHAR(100) COMMENT '学号',
    //加唯一索引，binary是为了英文区分大小写，因为mysql的唯一索引不区分大小写
    name VARCHAR(100) binary NOT NULL unique  COMMENT '姓名'
    createdOn DATETIME COMMENT '创建时间',
    PRIMARY KEY (id)
)
ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='学生表'
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[C#代码片段]]></title>
        <id>https://melody19930605.github.io/post/cdai-ma-pian-duan/</id>
        <link href="https://melody19930605.github.io/post/cdai-ma-pian-duan/">
        </link>
        <updated>2020-04-30T09:47:28.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-cs">    /// &lt;summary&gt;
    /// 实体转换器
    /// &lt;/summary&gt;
    public static class DefaultModelAdapter
    {
        /// &lt;summary&gt;
        /// 实体转换器(指定列转换)
        /// &lt;/summary&gt;
        /// &lt;typeparam name=&quot;T&quot;&gt;目标实体&lt;/typeparam&gt;
        /// &lt;typeparam name=&quot;TSource&quot;&gt;源实体&lt;/typeparam&gt;
        /// &lt;param name=&quot;t&quot;&gt;目标实体&lt;/param&gt;
        /// &lt;param name=&quot;source&quot;&gt;源实体&lt;/param&gt;
        /// &lt;param name=&quot;express&quot;&gt;指定需要将源实体的字段赋值给目标实体的字段(不传默认全部替换)&lt;/param&gt;
        public static void Transfer&lt;T, TSource&gt;(T t, TSource source, params Expression&lt;Func&lt;T, object&gt;&gt;[] express)
        {
            // 源实体的所有字段
            var sourceValues = source.GetType().GetProperties();
            // 目标实体的所有字段
            var targetVaules = t.GetType().GetProperties();
            // 获取所有需要替换的字段名称
            var columnNames = express.Select(item =&gt; GetPropName(item.Body)).ToList();
            // 需要更新的键值对
            var updates = sourceValues.Where(pi =&gt; columnNames.Contains(pi.Name)).ToDictionary(pi =&gt; pi.Name, pi =&gt; pi.GetValue(source, null));
            // 更新
            foreach (var item in updates)
            {
                foreach (var pi in targetVaules)
                {
                    if (pi.Name == item.Key)
                    {
                        pi.SetValue(t, item.Value);
                    }
                }
            }
        }

        /// &lt;summary&gt;
        /// 实体转换器(全部转换)
        /// &lt;/summary&gt;
        /// &lt;typeparam name=&quot;T&quot;&gt;目标实体&lt;/typeparam&gt;
        /// &lt;typeparam name=&quot;TSource&quot;&gt;源实体&lt;/typeparam&gt;
        /// &lt;param name=&quot;t&quot;&gt;目标实体&lt;/param&gt;
        /// &lt;param name=&quot;source&quot;&gt;源实体&lt;/param&gt;
        public static void Transfer&lt;T, TSource&gt;(T t, TSource source)
        {
            // 源实体的所有字段
            var sourceValues = source.GetType().GetProperties();
            // 目标实体的所有字段
            var targetVaules = t.GetType().GetProperties();
            // 需要更新的键值对
            var updates = sourceValues.ToDictionary(pi =&gt; pi.Name, pi =&gt; pi.GetValue(source, null));
            // 更新
            foreach (var item in updates)
            {
                foreach (var pi in targetVaules)
                {
                    if (pi.Name == item.Key)
                    {
                        pi.SetValue(t, item.Value);
                    }
                }
            }
        }

        /// &lt;summary&gt;
        /// Lambda表达式转换
        /// &lt;/summary&gt;
        /// &lt;param name=&quot;express&quot;&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static string GetPropName(Expression express)
        {
            var str = string.Empty;
            if (express is MemberExpression)
            {
                str = ((MemberExpression) express).Member.Name;
            }
            else if (express is UnaryExpression)
            {
                str = ((MemberExpression) ((UnaryExpression) express).Operand).Member.Name;
            }
            else if (express is ParameterExpression)
            {
                str = ((ParameterExpression) express).Type.Name;
            }
            return str;
        }
    }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[SqlServer查用SQL]]></title>
        <id>https://melody19930605.github.io/post/sqlserver-cha-yong-sql/</id>
        <link href="https://melody19930605.github.io/post/sqlserver-cha-yong-sql/">
        </link>
        <updated>2020-04-30T09:40:49.000Z</updated>
        <content type="html"><![CDATA[<h1 id="查询sqlserver索引">查询SqlServer索引</h1>
<pre><code class="language-sql">SELECT   索引名称=a.name  
,表名=c.name  
,索引字段名=d.name  
,索引字段位置=d.colid  
FROM   sysindexes   a  
JOIN   sysindexkeys   b   ON   a.id=b.id   AND   a.indid=b.indid  
JOIN   sysobjects   c   ON   b.id=c.id  
JOIN   syscolumns   d   ON   b.id=d.id   AND   b.colid=d.colid  
WHERE   a.indid   NOT IN(0,255)  
-- and   c.xtype='U'   and   c.status&gt;0 --查所有用户表  
AND   c.name='tableName' --查指定表  
ORDER BY   c.name,a.name,d.name
</code></pre>
<h1 id="数据库表查询">数据库表查询</h1>
<pre><code class="language-sql">SELECT  
d.name 表名,
a.colorder 字段序号,
a.name 字段名,
b.name 类型,
a.length 占用字节数,
COLUMNPROPERTY(a.id,a.name,'PRECISION') AS 长度,
ISNULL(e.text,'') 默认值,
ISNULL(g.[value],'') AS 字段说明
FROM syscolumns a
LEFT JOIN systypes b ON a.xtype=b.xusertype
INNER JOIN sysobjects d ON a.id=d.id AND d.xtype='U' AND d.name &lt;&gt;'dtproperties'
LEFT JOIN syscomments e ON a.cdefault=e.id
LEFT JOIN sys.extended_properties g  ON a.id=g.major_id AND a.colid = g.minor_id
WHERE d.name='tableName'
ORDER BY a.id,a.colorder
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[利用Python生成C#实体]]></title>
        <id>https://melody19930605.github.io/post/li-yong-python-sheng-cheng-cshi-ti/</id>
        <link href="https://melody19930605.github.io/post/li-yong-python-sheng-cheng-cshi-ti/">
        </link>
        <updated>2019-12-10T12:14:03.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-python"># -*- coding: UTF-8 -*-

import pymysql


def TypeChange(typeName):
    if typeName == &quot;bigint&quot;:
        return &quot;long&quot;
    elif typeName == &quot;varchar&quot;:
        return &quot;string&quot;
    elif typeName == &quot;datetime&quot;:
        return &quot;DateTime&quot;
    elif typeName == &quot;int&quot;:
        return &quot;int&quot;
    elif typeName == &quot;decimal&quot;:
        return &quot;decimal&quot;
    else:
        return &quot;&quot;


def ColumnNameChange(columnName, prefix):
    if len(columnName) &lt; len(prefix):
        return columnName
    elif columnName[0:len(prefix)] == prefix:
        return columnName[len(prefix):len(columnName)]
    else:
        return columnName


tableName = input(&quot;请输入表名：&quot;)
dataModelName = input(&quot;请输入实体名称：&quot;)
prefix = input(&quot;字段前缀名：&quot;)

# 新建数据库连接
conn = pymysql.connect(
    host='',
    port=,
    user='',
    password='',
    db='',
    charset='utf8')
# 2获取游标
cursor = conn.cursor()
# 3执行查询，并获取查询的总行数
rowNums = cursor.execute('''SELECT COLUMN_NAME 列名,  
COLUMN_TYPE 数据类型,  
DATA_TYPE 字段类型,  
CHARACTER_MAXIMUM_LENGTH 长度,  
IS_NULLABLE 是否为空,  
COLUMN_DEFAULT 默认值,  
COLUMN_COMMENT 备注   
FROM INFORMATION_SCHEMA.COLUMNS 
where table_name = &quot;''' + tableName + '''&quot; ''')

# 4.遍历结果，获取查询的结果
newtxt = '''
/// &lt;summary&gt;
/// ''' + tableName + '''
/// &lt;/summary&gt;
[Table(&quot;''' + tableName + '''&quot;)]
public class ''' + dataModelName + '''
{
    XXXX
}
'''
innertxt = ''
ResultList = cursor.fetchall()
for i in range(len(ResultList)):
    innertxt = innertxt + '''
    /// &lt;summary&gt;
    /// %s
    /// &lt;/summary&gt;
    [Column(&quot;%s&quot;)]
    [DisplayName(&quot;%s&quot;)]
    public %s %s { get; set; }
    ''' % (ResultList[i][6], ResultList[i][0], ResultList[i][6],
           TypeChange(ResultList[i][2]), 
           ColumnNameChange(ResultList[i][0], prefix))

    # print(ResultList[i])
# 提交如果需要插入语句的时候使用commit
# conn.commit()
# 关闭
cursor.close()
conn.close()

f = open(dataModelName + '.cs', mode=&quot;w&quot;, encoding=&quot;utf8&quot;)
f.write(newtxt.replace(&quot;XXXX&quot;, innertxt))
f.flush()
f.close()

print(&quot;生成完成&quot;)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[From Now On]]></title>
        <id>https://melody19930605.github.io/post/from-now-on/</id>
        <link href="https://melody19930605.github.io/post/from-now-on/">
        </link>
        <updated>2019-10-30T09:13:21.000Z</updated>
        <content type="html"><![CDATA[<p>一个人的喜欢是重蹈覆辙<br>
两个人的喜欢是失而复得</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello GitHub]]></title>
        <id>https://melody19930605.github.io/post/hello-github/</id>
        <link href="https://melody19930605.github.io/post/hello-github/">
        </link>
        <updated>2019-09-16T11:21:55.000Z</updated>
        <summary type="html"><![CDATA[<p>关于GitHub Pages</p>
]]></summary>
        <content type="html"><![CDATA[<p>关于GitHub Pages</p>
<!-- more -->
<p>终于在有一个MarkDown软件可以代替手动部署了，感觉非常强大，先体验一下，后面会写点随笔之类的记录一下。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://melody19930605.github.io/post/hello-gridea/</id>
        <link href="https://melody19930605.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>