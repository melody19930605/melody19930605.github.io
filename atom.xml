<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://melody19930605.github.io/</id>
    <title>Melody</title>
    <updated>2019-12-10T12:16:30.742Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://melody19930605.github.io/"/>
    <link rel="self" href="https://melody19930605.github.io//atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://melody19930605.github.io//images/avatar.png</logo>
    <icon>https://melody19930605.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, Melody</rights>
    <entry>
        <title type="html"><![CDATA[利用Python生成C#实体]]></title>
        <id>https://melody19930605.github.io//post/li-yong-python-sheng-cheng-cshi-ti</id>
        <link href="https://melody19930605.github.io//post/li-yong-python-sheng-cheng-cshi-ti">
        </link>
        <updated>2019-12-10T12:14:03.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-python"># -*- coding: UTF-8 -*-

import pymysql


def TypeChange(typeName):
    if typeName == &quot;bigint&quot;:
        return &quot;long&quot;
    elif typeName == &quot;varchar&quot;:
        return &quot;string&quot;
    elif typeName == &quot;datetime&quot;:
        return &quot;DateTime&quot;
    elif typeName == &quot;int&quot;:
        return &quot;int&quot;
    elif typeName == &quot;decimal&quot;:
        return &quot;decimal&quot;
    else:
        return &quot;&quot;


def ColumnNameChange(columnName, prefix):
    if len(columnName) &lt; len(prefix):
        return columnName
    elif columnName[0:len(prefix)] == prefix:
        return columnName[len(prefix):len(columnName)]
    else:
        return columnName


tableName = input(&quot;请输入表名：&quot;)
dataModelName = input(&quot;请输入实体名称：&quot;)
prefix = input(&quot;字段前缀名：&quot;)

# 新建数据库连接
conn = pymysql.connect(
    host='',
    port=,
    user='',
    password='',
    db='',
    charset='utf8')
# 2获取游标
cursor = conn.cursor()
# 3执行查询，并获取查询的总行数
rowNums = cursor.execute('''SELECT COLUMN_NAME 列名,  
COLUMN_TYPE 数据类型,  
DATA_TYPE 字段类型,  
CHARACTER_MAXIMUM_LENGTH 长度,  
IS_NULLABLE 是否为空,  
COLUMN_DEFAULT 默认值,  
COLUMN_COMMENT 备注   
FROM INFORMATION_SCHEMA.COLUMNS 
where table_name = &quot;''' + tableName + '''&quot; ''')

# 4.遍历结果，获取查询的结果
newtxt = '''
/// &lt;summary&gt;
/// ''' + tableName + '''
/// &lt;/summary&gt;
[Table(&quot;''' + tableName + '''&quot;)]
public class ''' + dataModelName + '''
{
    XXXX
}
'''
innertxt = ''
ResultList = cursor.fetchall()
for i in range(len(ResultList)):
    innertxt = innertxt + '''
    /// &lt;summary&gt;
    /// %s
    /// &lt;/summary&gt;
    [Column(&quot;%s&quot;)]
    [DisplayName(&quot;%s&quot;)]
    public %s %s { get; set; }
    ''' % (ResultList[i][6], ResultList[i][0], ResultList[i][6],
           TypeChange(ResultList[i][2]), 
           ColumnNameChange(ResultList[i][0], prefix))

    # print(ResultList[i])
# 提交如果需要插入语句的时候使用commit
# conn.commit()
# 关闭
cursor.close()
conn.close()

f = open(dataModelName + '.cs', mode=&quot;w&quot;, encoding=&quot;utf8&quot;)
f.write(newtxt.replace(&quot;XXXX&quot;, innertxt))
f.flush()
f.close()

print(&quot;生成完成&quot;)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[From Now On]]></title>
        <id>https://melody19930605.github.io//post/from-now-on</id>
        <link href="https://melody19930605.github.io//post/from-now-on">
        </link>
        <updated>2019-10-30T09:13:21.000Z</updated>
        <content type="html"><![CDATA[<p>一个人的喜欢是重蹈覆辙<br>
两个人的喜欢是失而复得</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello GitHub]]></title>
        <id>https://melody19930605.github.io//post/hello-github</id>
        <link href="https://melody19930605.github.io//post/hello-github">
        </link>
        <updated>2019-09-16T11:21:55.000Z</updated>
        <summary type="html"><![CDATA[<p>关于GitHub Pages</p>
]]></summary>
        <content type="html"><![CDATA[<p>关于GitHub Pages</p>
<!-- more -->
<p>终于在有一个MarkDown软件可以代替手动部署了，感觉非常强大，先体验一下，后面会写点随笔之类的记录一下。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://melody19930605.github.io//post/hello-gridea</id>
        <link href="https://melody19930605.github.io//post/hello-gridea">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="http://hvenotes.fehey.com/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>𝖶𝗂𝗇𝖽𝗈𝗐𝗌</strong> 或 <strong>𝖬𝖺𝖼𝖮𝖲</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>